{{/*
Copyright 2019-present Facebook Inc. All rights reserved.
This source code is licensed under the Apache 2.0 license found
in the LICENSE file in the root directory of this source tree.
*/}}

{{ define "client" }}

{{ $pkg := base $.Config.Package }}
{{ template "header" $ }}

import (
	"log"

	"{{ $.Config.Package }}/migrate"
	{{ range $_, $n := $.Nodes }}
		"{{ $n.Config.Package }}/{{ $n.Package }}"
	{{- end }}

	"github.com/facebook/ent/dialect"
	{{ range $_, $import := $.Storage.Imports -}}
		"{{ $import }}"
	{{ end -}}
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	{{- if $.SupportMigrate }}
		// Schema is the client for creating, migrating and dropping schema.
		Schema *migrate.Schema
	{{- end }}
	{{- range $n := $.Nodes }}
		// {{ $n.Name }} is the client for interacting with the {{ $n.Name }} builders.
		{{ $n.Name }} *{{ $n.Name }}Client
	{{- end }}
	{{ template "client/fields/additional" $ }}
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	{{- if $.SupportMigrate }}
		c.Schema = migrate.NewSchema(c.driver)
	{{- end }}
	{{- range $n := $.Nodes }}
    	c.{{ $n.Name }} =  New{{ $n.Name }}Client(c.config)
	{{- end }}
}

func (c *Client) CheckHealth(ctx context.Context) error {
	{{- range $n := $.Nodes }}
			if err := c.{{ $n.Name }}.CheckHealth(ctx); err != nil {
				return err
			}
	{{- end }}
	return nil
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case {{ join $.Storage.Dialects ", " }}:
		{{- $tmpl := printf "dialect/%s/client/open" $.Storage -}}
		{{- xtemplate $tmpl . -}}
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("{{ $pkg }}: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("{{ $pkg }}: starting a transaction: %v", err)
	}
	cfg := config{driver: tx, log: c.log, debug: c.debug, hooks: c.hooks}
	return &Tx{
		config: cfg,
		{{ range $_, $n := $.Nodes -}}
			{{ $n.Name }}: New{{ $n.Name }}Client(cfg),
		{{ end -}}
	}, nil
}

{{- /* If the storage driver supports TxOptions (like SQL) */}}
{{- $tmpl = printf "dialect/%s/txoptions" $.Storage }}
{{- if hasTemplate $tmpl }}
    {{- xtemplate $tmpl . }}
{{- end }}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		{{ (index $.Nodes 0).Name }}.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := config{driver: dialect.Debug(c.driver, c.log), log: c.log, debug: true, hooks: c.hooks}
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	{{- range $_, $n := $.Nodes }}
		c.{{ $n.Name }}.Use(hooks...)
	{{- end }}
}


{{ range $_, $n := $.Nodes }}
{{ $client := print $n.Name "Client" }}
// {{ $client }} is a client for the {{ $n.Name }} schema.
type {{ $client }} struct {
	config
}

{{ $rec := $n.Receiver }}{{ if eq $rec "c" }}{{ $rec = printf "%.2s" $n.Name | lower }}{{ end }}

// New{{ $client }} returns a client for the {{ $n.Name }} from the given config.
func New{{ $client }}(c config) *{{ $client }} {
	return &{{ $client }}{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `{{ $n.Package }}.Hooks(f(g(h())))`.
func (c *{{ $client }}) Use(hooks ...Hook) {
	c.hooks.{{ $n.Name }} = append(c.hooks.{{ $n.Name }}, hooks...)
}

// Create returns a create builder for {{ $n.Name }}.
func (c *{{ $client }}) Create() *{{ $n.Name }}Create {
	mutation := new{{ $n.MutationName }}(c.config, OpCreate)
	return &{{ $n.Name }}Create{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for {{ $n.Name }}.
func (c *{{ $client }}) Update() *{{ $n.Name }}Update {
	mutation := new{{ $n.MutationName }}(c.config, OpUpdate)
	return &{{ $n.Name }}Update{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *{{ $client }}) UpdateOne({{ $rec }} *{{ $n.Name }}) *{{ $n.Name }}UpdateOne {
	mutation := new{{ $n.MutationName }}(c.config, OpUpdateOne, {{ print "with" $n.Name }}({{ $rec }}))
	return &{{ $n.Name }}UpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *{{ $client }}) UpdateOneID(id {{ $n.ID.Type }}) *{{ $n.Name }}UpdateOne {
	mutation := new{{ $n.MutationName }}(c.config, OpUpdateOne, {{ print "with" $n.Name "ID" }}(id))
	return &{{ $n.Name }}UpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for {{ $n.Name }}.
func (c *{{ $client }}) Delete() *{{ $n.Name }}Delete {
	mutation := new{{ $n.MutationName }}(c.config, OpDelete)
	return &{{ $n.Name }}Delete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *{{ $client }}) DeleteOne({{ $rec }} *{{ $n.Name }}) *{{ $n.Name }}DeleteOne {
	return c.DeleteOneID({{ $rec }}.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *{{ $client }}) DeleteOneID(id {{ $n.ID.Type }}) *{{ $n.Name }}DeleteOne {
	builder := c.Delete().Where({{ $n.Package }}.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &{{ $n.Name }}DeleteOne{builder}
}

// Create returns a query builder for {{ $n.Name }}.
func (c *{{ $client }}) Query() *{{ $n.Name }}Query {
	return &{{ $n.Name }}Query{config: c.config}
}

// Get returns a {{ $n.Name }} entity by its id.
func (c *{{ $client }}) Get(ctx context.Context, id {{ $n.ID.Type }}) (*{{ $n.Name }}, error) {
	return c.Query().Where({{ $n.Package }}.ID(id)).Only(ctx)
}

// CheckHealth try to read a first {{ $n.Name }} entity, okay if NotFound, returns the error if any other error happens.
func (c *{{ $client }}) CheckHealth(ctx context.Context) (error) {
	_, err := c.Query().Limit(1).Only(ctx)
	if err != nil  && !IsNotFound(err) {
		return err
	}
	return nil
}

// GetX is like Get, but panics if an error occurs.
func (c *{{ $client }}) GetX(ctx context.Context, id {{ $n.ID.Type }}) *{{ $n.Name }} {
	{{ $rec }}, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return {{ $rec }}
}

// CreateManyOnConflict by {{ $n.Name }}Create slice
func (c *{{ $client }}) CreateManyOnConflict(ctx context.Context, objs []*{{ $n.Name }}Create, extra string, ignore bool) error {
	tx, err := c.config.driver.Tx(ctx)
	if err != nil {
		return err
	}
	sIndex := 0
	if objs[0].mutation.id == nil {
		sIndex = 1
	}
	columns := {{ $n.Package  }}.Columns[sIndex:]
	inserter := sql.Insert({{ $n.Package }}.Table).Columns(columns...)
	for _, obj := range objs {
		obj.preSave()
		values := []interface{}{}
		_, spec := obj.createSpec()
		if sIndex == 0 {
			values = append(values, spec.ID.Value)
		}
		for _, field := range spec.Fields {
			values = append(values, field.Value)
		}
		if len(values) != len(columns) {
			return errors.New("CreateManyOnConflict {{ $n.Package }}: Columns length not match")
		}
		inserter.Values(values...)
	}
	var res sql.Result
	sql, args := inserter.Query()
	if ignore {
		sql = strings.Replace(sql, "INSERT INTO", "INSERT IGNORE INTO", 1)
	}
	sql = sql + " " + extra
	if err := tx.Exec(ctx, sql, args, &res); err != nil {
		if err_roll := tx.Rollback(); err_roll != nil {
			return errors.New(err.Error() + "\n" + err_roll.Error())
		}
		return err
	}
	return tx.Commit()
}

{{ range $_, $e := $n.Edges }}
{{ $builder := $e.Type.QueryName }}
// Query{{ pascal $e.Name }} queries the {{ $e.Name }} edge of a {{ $n.Name }}.
func (c *{{ $client }}) Query{{ pascal $e.Name }}({{ $rec }} *{{ $n.Name }}) *{{ $builder }} {
	query := &{{ $builder }}{config: c.config}
	query.path = func(ctx context.Context) (fromV {{ $.Storage.Builder }}, _ error) {
		{{- with extend $n "Receiver" $rec "Edge" $e "Ident" "fromV" }}
			{{ $tmpl := printf "dialect/%s/query/from" $.Storage }}
			{{- xtemplate $tmpl . -}}
		{{- end -}}
		return fromV, nil
	}
	return query
}
{{ end }}

// Hooks returns the client hooks.
func (c *{{ $client }}) Hooks() []Hook {
	{{- if or $n.NumHooks $n.HasPolicy }}
		hooks := c.hooks.{{ $n.Name }}
		return append(hooks[:len(hooks):len(hooks)], {{ $n.Package }}.Hooks[:]...)
	{{- else }}
		return c.hooks.{{ $n.Name }}
	{{- end }}
}

{{ end }}
{{ end }}

{{/* A template that can be overrided in order to add additional fields to the client.*/}}
{{ define "client/fields/additional" }}{{ end }}


{{ define "util" }}


{{ $pkg := base $.Config.Package }}
{{ template "header" $ }}


import (
    "context"
    "fmt"
    "reflect"

)

func WithTx(ctx context.Context, client *Client, fn func(tx *Tx) error) error {
    tx, err := client.Tx(ctx)
    if err != nil {
        return err
    }
    defer func() {
        if v := recover(); v != nil {
            _ = tx.Rollback()
            panic(v)
        }
    }()
    if err := fn(tx); err != nil {
        if rerr := tx.Rollback(); rerr != nil {
            err = fmt.Errorf("%w rolling back transaction: %v", err, rerr)
        }
        return err
    }
    if err := tx.Commit(); err != nil {
        return fmt.Errorf("committing transaction: %w", err)
    }
    return nil
}

func TxDecorator(client *Client, fn interface{}) func(...interface{}) (interface{}, error) {
	fnType := reflect.TypeOf(fn)
	if fnType.Kind() != reflect.Func {
		panic("decorated object is not a function")
	}

	if fnType.NumIn() < 2 {
		panic("the size of decorated function's parameter is less than 2")
	}

	contextInterface := reflect.TypeOf((*context.Context)(nil)).Elem()
	if fnType.In(0).Kind() != reflect.Interface || !fnType.In(0).Implements(contextInterface) {
		panic("the 1st parameter of decorated function is not context.Context")
	}

	txInterface := reflect.TypeOf((*Tx)(nil)).Elem()
	if fnType.In(1).Kind() != reflect.Ptr || fnType.In(1).Elem() != txInterface {
		panic("the 2nd parameter of decorated function is not *Tx")
	}

	if fnType.NumOut() != 2 {
		panic("the size of decorated function's output is not equal to 2")
	}
	
	errorInterface := reflect.TypeOf((*error)(nil)).Elem()
	if fnType.Out(1).Kind() != reflect.Interface || !fnType.Out(1).Implements(errorInterface) {
		panic("the 2nd output of decorated function is not error")
	}

	return func(args ...interface{}) (interface{}, error) {
		vargs := make([]reflect.Value, len(args))
		for n, v := range args {
			vargs[n] = reflect.ValueOf(v)
		}
		// the size of wrapper function should be equal to the decorated function
		out := make([]reflect.Value, 2)
		// first parameter should be Context
		actx := vargs[0].Interface().(context.Context)

		// second parameter should be *Tx
		// caller called with nil tx
		if args[1] == nil {
			if err := WithTx(actx, client, func(tx *Tx) error {
				// modified tx to new value
				vargs[1] = reflect.ValueOf(tx)
				out = reflect.ValueOf(fn).Call(vargs)
				if out[1].IsNil() {
					return nil
				}
				return out[1].Interface().(error)
			}); err != nil {
				return nil, err
			}

			// pass the outputs of decorated function to caller
			if out[1].IsNil() {
				return out[0].Interface(), nil
			}
			return out[0].Interface(), out[1].Interface().(error)
		}

		// caller called with non-nil tx
		out = reflect.ValueOf(fn).Call(vargs)

		// pass the outputs of decorated function to caller
		if out[1].IsNil() {
			return out[0].Interface(), nil
		}
		return out[0].Interface(), out[1].Interface().(error)
	}
}

{{ end }}